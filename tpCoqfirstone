Require Export Classical.
Require Export Reals.
Open Scope R_scope.

Parameter rac2:R.
Definition is_irrat (x:R):Prop:=forall n p : nat,x*(INR p) <> (INR n).
Definition is_rat (x:R):Prop:=
  exists n:nat, exists p:nat , x*(INR p) = (INR n).
Hypothesis two_rac2 : rac2 * rac2 = 2.
Hypothesis rac2_irr : is_irrat rac2.
Hypothesis two_rat : is_rat (Rpower rac2 2).
Hypothesis irrat_not_rat: forall x:R, ~(is_rat x) -> is_irrat x.

Lemma irrat_class:
  exists x:R, exists y:R,
(is_irrat  x) /\ (is_irrat y) /\ (is_rat (Rpower x y)).
Proof.

(*Print classic.*)

elim (classic (is_rat (Rpower rac2 rac2))).
intro.
exists rac2. 
exists rac2.

split.
apply rac2_irr.
split.
apply rac2_irr.
assumption.



intro.
exists (Rpower rac2  rac2 ).
exists rac2.

split.

apply irrat_not_rat.

assumption.


split.


apply rac2_irr.


rewrite Rpower_mult.

rewrite two_rac2.

apply two_rat.


Qed.


Print irrat_class.
